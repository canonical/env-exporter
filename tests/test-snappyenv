#!/bin/bash

set -eu

BASEDIR=$(dirname "$(realpath "$0")")

PROJECT_ROOT="$BASEDIR/.."

assert_env() {
  local snap_app="$1"
  local env_name="$2"
  local exp_value="$3"
  local actual_value
  if ! eval "$snap_app" | grep -q "^${env_name}="; then
    echo -e "\n[WARN] Environment variable '$env_name' is not set.\n"
    return 1
  fi
  if [ -z "$env_name" ]; then
    empty=$("$snap_app" | grep "=${exp_value}")
    [ -z "$empty" ] || return 1
  fi
  actual_value=$("$snap_app" | grep "^${env_name}=" | cut -d'=' -f2-)
  if [ "$actual_value" != "$exp_value" ]; then
    echo -e "\n[ERROR] Environment variable '$env_name' does not match the expected value."
    echo -e "[ERROR] Expected: '$env_name=$exp_value', but got: '$env_name=$actual_value'\n"
    return 1
  fi
  return 0
}

check_root() {
  if [ "$USER" != "root" ]; then
    echo -e "Please run as root.\n"
    exit 1
  fi
}

teardown() {
  echo "Cleaning and exit..."
  snap remove --purge "${SNAP}"

  rm -rf squashfs-root
}

fail() {
  teardown
  exit 1
}

check_root

SNAP=envtester

echo "SNAP NAME: ${SNAP}"

pushd "$PROJECT_ROOT" || exit 1

SNAPCRAFT_ENABLE_EXPERIMENTAL_EXTENSIONS=1 snapcraft -o "${SNAP}".snap

unsquashfs "$PROJECT_ROOT/${SNAP}.snap"

echo "Check that the env-exporter program is present"
[ -f squashfs-root/bin/env-exporter ] || fail

echo "Check that the exec-env script is present"
[ -f squashfs-root/bin/env.sh ] || fail

snap install "${SNAP}".snap --dangerous

echo -e "\n[envtester] Creating global envfile"
echo 'HELLO_WORLD="Hello World"' >>/var/snap/"${SNAP}"/common/global.env

echo "Load global envfile"
snap set "${SNAP}" envfile=/var/snap/"${SNAP}"/common/global.env

echo "[TEST] - Check if the global envfile is loaded the app using Rust and bash snappy-env programs"
assert_env "${SNAP}.app-rust" "HELLO_WORLD" "Hello World" || fail
assert_env "${SNAP}.app-bash" "HELLO_WORLD" "Hello World" || fail

echo -e "\n[envtester] Creating app-specific envfile"
echo 'SCOPED=RustVersion' >>/var/snap/"${SNAP}"/common/rust.env
echo 'SCOPED=BashVersion' >>/var/snap/"${SNAP}"/common/bash.env

echo "Load app-specific envfile"
snap set "${SNAP}" apps.app-rust.envfile=/var/snap/"${SNAP}"/common/rust.env
snap set "${SNAP}" apps.app-bash.envfile=/var/snap/"${SNAP}"/common/bash.env

echo "[TEST] - Check if the app-specific envfile is loaded for the apps"
assert_env "${SNAP}.app-rust" "SCOPED" "RustVersion" || fail
assert_env "${SNAP}.app-bash" "SCOPED" "BashVersion" || fail

echo -e "\n[envtester] Setting global env variable"

echo "Set env vars: Global"
snap set "${SNAP}" env.global="World"

echo "[TEST] - Check if the global env var is set for all apps"
assert_env "${SNAP}.app-rust" "GLOBAL" "World" || fail
assert_env "${SNAP}.app-bash" "GLOBAL" "World" || fail

echo -e "\n[envtester] Setting app-specific env variable"
echo "Set env vars: specific to each app"
snap set "${SNAP}" apps.app-rust.env.hello="Hello"
snap set "${SNAP}" apps.app-bash.env.specific="City"

echo "[TEST] - Check if the app-specific env var IS SET for the app 'app-rust'"
assert_env "${SNAP}.app-rust" "HELLO" "Hello" || fail

echo -e "\n[TEST] [WARN EXPECTED] - Check if the app-specific env var IS NOT SET for the app 'app-bash'"
! assert_env "${SNAP}.app-bash" "HELLO" "Hello" || fail

echo -e "\n[TEST] - Check if the app-specific env var IS SET for the app 'app-bash'"
assert_env "${SNAP}.app-bash" "SPECIFIC" "City" || fail

echo -e "\n[TEST] [WARN EXPECTED] - Check if the app-specific env var IS NOT SET for the app 'app-rust'"
! assert_env "${SNAP}.app-rust" "SPECIFIC" "City" || fail

echo -e "\n[envtester] Testing options syntax"
snap set "${SNAP}" env.word.dot="wrong"
echo "[TEST] [WARN EXPECTED] - Check if the key with dot was ignored"
! assert_env "${SNAP}.app-rust" "" "wrong" || fail

echo -e "\n[envtester] Testing order of env vars"
echo 'ORDER="From envfile"' >>/var/snap/"${SNAP}"/common/local.env
snap set "${SNAP}" apps.app-rust.env.order="from app-specific"
snap set "${SNAP}" apps.app-rust.envfile=/var/snap/"${SNAP}"/common/local.env
echo "[TEST] - Check if local overrites global"
assert_env "${SNAP}.app-rust" "ORDER" "from app-specific" || fail

teardown
popd || exit 1
exit 0
